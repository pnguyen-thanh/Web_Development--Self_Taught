import * as THREE from 'three'
import './style.css'
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'


const scene = new THREE.Scene()

const geometry = new THREE.BoxGeometry(1, 1, 1)
const material = new THREE.MeshBasicMaterial({color: "red"})
const cube = new THREE.Mesh( geometry, material)

scene.add(cube)

const sizes = {
    width: window.innerWidth,
    height: window.innerHeight
}

window.addEventListener('resize', () => {
    sizes.width = window.innerWidth
    sizes.height = window.innerHeight
    camera.aspect = sizes.width / sizes.height
    camera.updateProjectionMatrix()
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
})

window.addEventListener('dblclick', () => {
    const fullScreenElement = document.fullscreenElement || document.webkitFullScreenElement
    if (!fullScreenElement) {
        if (canvas.requestFullscreen) {
            canvas.requestFullscreen()
        } else if (canvas.webkitFullScreenElement) {
            canvas.webkitFullScreenElement()
        }
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen()
        } else if (document.webkitExitFullScreen) {
            document.webkitExitFullScreen()
        }
    }
})

const canvas = document.querySelector('.webgl')
const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1 , 100)
camera.position.z = 3
scene.add(camera)
const renderer = new THREE.WebGLRenderer({canvas:  canvas})
renderer.setSize(sizes.width, sizes.height)
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
const controls = new OrbitControls(camera, canvas)
// controls.enabled = false
controls.enableDamping = true

const animation = () => {

    controls.update()
    requestAnimationFrame(animation)
    renderer.render(scene, camera)
}

// animation()
